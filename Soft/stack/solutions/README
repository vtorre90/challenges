# The Stack Data Structure

## Easy version

Your task is to create a data structure for a stack. It should be able to do the following:

- `push(item)` - Add an item to the top of the stack.
- `pop()` - Remove the top item from the stack.
- `peek()` - Returns a copy of the top item in the stack.
- `isEmpty()` - Return a boolean indicating whether or not the stack is empty.
- `size()` - Return the number of items in the stack.

You can use any programming language of your choice.

When committing your solution, make sure to write a README.md file explaining when it is helpful to use a stack and how it differs from a queue.

## Hard version

If you want a more challenging version, you can implement a stack in one of the following programming languages:

- C
- C++
- C#
- D
- Elixir
- Erlang
- OCaml
- Haskell
- F#
- Scala
- Java
- Kotlin
- Clojure
- Swift
